/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/permits": {
    /**
     * List all permits with pagination and filtering
     * @description Returns a paginated list of permits.
     *
     * **Note:** This endpoint has the following simulated issues:
     * 1. Rate limiting: Limited to 5 requests per second
     * 2. Random server errors: 1% chance of a 500 error
     * 3. Pagination: Maximum of 5 items per page
     */
    get: {
      parameters: {
        query?: {
          page?: components["parameters"]["pageParam"];
          perPage?: components["parameters"]["perPageParam"];
          submittedAfter?: components["parameters"]["submittedAfterParam"];
          submittedBefore?: components["parameters"]["submittedBeforeParam"];
          status?: components["parameters"]["statusParam"];
        };
      };
      responses: {
        /** @description A paginated list of permits */
        200: {
          content: {
            "application/json": components["schemas"]["PaginatedPermits"];
          };
        };
        /** @description Bad request - invalid parameters */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        429: components["responses"]["TooManyRequests"];
        500: components["responses"]["InternalServerError"];
      };
    };
  };
  "/permits/{permitId}": {
    /**
     * Get a specific permit by ID
     * @description Returns details for a specific permit.
     *
     * **Note:** This endpoint has the following simulated issues:
     * 1. Rate limiting: Limited to 5 requests per second
     * 2. Random server errors: 1% chance of a 500 error
     */
    get: {
      parameters: {
        path: {
          /** @description The unique identifier for the permit (UUID format) */
          permitId: string;
        };
      };
      responses: {
        /** @description Details of a specific permit */
        200: {
          content: {
            "application/json": components["schemas"]["Permit"];
          };
        };
        /** @description Bad request - invalid permit ID */
        400: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        /** @description Permit not found */
        404: {
          content: {
            "application/json": components["schemas"]["Error"];
          };
        };
        429: components["responses"]["TooManyRequests"];
        500: components["responses"]["InternalServerError"];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    Permit: {
      /**
       * @description Unique identifier for the permit (UUID format)
       * @example f47ac10b-58cc-4372-a567-0e02b2c3d479
       */
      permitId: string;
      propertyAddress: {
        /** @example 7 Gravelly Point Rd */
        street?: string;
        /** @example Highlands */
        city?: string;
        /** @example NJ */
        state?: string;
        /** @example 07732 */
        zip?: string;
      };
      /**
       * @example Complete
       * @enum {string}
       */
      status: "Pending" | "In Progress" | "Complete" | "Rejected" | "On Hold";
      /**
       * Format: date
       * @example 2025-03-27
       */
      dateSubmitted: string;
      /**
       * @description Dollar value of the improvement
       * @example 1600
       */
      improvementAmount?: number;
      documents?: {
        /** @example DOC-2025-0456 */
        documentId?: string;
        /** @example Gravelly_FL_FD_Permit_SIGNED_3.25.pdf */
        filename?: string;
        /** @example Floodplain Development Permit */
        documentType?: string;
        /**
         * Format: date
         * @example 2025-03-27
         */
        uploadDate?: string;
        /**
         * Format: url
         * @example https://permits.example.com/files/Gravelly_FL_FD_Permit_SIGNED_3.25.pdf
         */
        fileUrl?: string;
      }[];
    };
    PaginatedPermits: {
      data: components["schemas"]["Permit"][];
      meta: {
        /** @example 1 */
        currentPage: number;
        /** @example 3 */
        totalPages: number;
        /** @example 5 */
        perPage: number;
        /** @example 12 */
        total: number;
      };
      links: {
        /** @example /permits?page=1&perPage=5 */
        self?: string;
        /** @example /permits?page=2&perPage=5 */
        next?: string;
        /** @example null */
        prev?: string | null;
      };
    };
    Error: {
      /** @example rateLimitExceeded */
      code?: string;
      /** @example Rate limit exceeded. Only 5 requests per second allowed. */
      message?: string;
    };
  };
  responses: {
    /** @description Too many requests - rate limit exceeded (more than 5 requests per second) */
    TooManyRequests: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
    /** @description Internal server error - random occurrence to simulate real-world conditions */
    InternalServerError: {
      content: {
        "application/json": components["schemas"]["Error"];
      };
    };
  };
  parameters: {
    /** @description Page number for pagination */
    pageParam?: number;
    /** @description Number of items per page (maximum 5) */
    perPageParam?: number;
    /** @description Filter permits submitted after this date (format YYYY-MM-DD) */
    submittedAfterParam?: string;
    /** @description Filter permits submitted before this date (format YYYY-MM-DD) */
    submittedBeforeParam?: string;
    /** @description Filter permits by status */
    statusParam?:
      | "Pending"
      | "In Progress"
      | "Complete"
      | "Rejected"
      | "On Hold";
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
